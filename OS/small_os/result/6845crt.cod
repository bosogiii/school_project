; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\develop\MyoskOS\6845crt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_CrtPrintf
; Function compile flags: /Odtp /ZI
; File c:\develop\myoskos\6845crt.c
;	COMDAT _CrtPrintf
_TEXT	SEGMENT
_args$ = -8						; size = 4
_i$ = -4						; size = 4
_fmt$ = 8						; size = 4
_CrtPrintf PROC						; COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 30   : 	int i;
; 31   : 	va_list args;
; 32   : 
; 33   : 	va_start(args, fmt);

  00009	8d 45 0c	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR _args$[ebp], eax

; 34   : 
; 35   : 	i=CrtpPrintfFmt(DEFAULT_ATTRIBUTE, 0xffff, 0xffff, fmt, args);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _args$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00016	51		 push	 ecx
  00017	68 ff ff 00 00	 push	 65535			; 0000ffffH
  0001c	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00021	6a 07		 push	 7
  00023	e8 00 00 00 00	 call	 _CrtpPrintfFmt
  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 36   : 	va_end(args);

  0002e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 37   : 
; 38   : 	return i;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]

; 39   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_CrtPrintf ENDP
_TEXT	ENDS
PUBLIC	_CrtPrintTextXYWithAttr
EXTRN	_vsprintf:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _CrtpPrintfFmt
_TEXT	SEGMENT
_i$ = -260						; size = 4
_buf$ = -256						; size = 256
_Attr$ = 8						; size = 1
_x$ = 12						; size = 2
_y$ = 16						; size = 2
_fmt$ = 20						; size = 4
_args$ = 24						; size = 4
_CrtpPrintfFmt PROC					; COMDAT

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 43   : 	char buf[256];
; 44   : 	int i;
; 45   : 
; 46   : 	i=vsprintf(buf, fmt, args);

  0000c	8b 45 18	 mov	 eax, DWORD PTR _args$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 14	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00013	51		 push	 ecx
  00014	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 _vsprintf
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	89 85 fc fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax

; 47   : 	CrtPrintTextXYWithAttr(buf, x, y, Attr);

  00029	8a 45 08	 mov	 al, BYTE PTR _Attr$[ebp]
  0002c	50		 push	 eax
  0002d	66 8b 4d 10	 mov	 cx, WORD PTR _y$[ebp]
  00031	51		 push	 ecx
  00032	66 8b 55 0c	 mov	 dx, WORD PTR _x$[ebp]
  00036	52		 push	 edx
  00037	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _CrtPrintTextXYWithAttr
  00043	83 c4 10	 add	 esp, 16			; 00000010H

; 48   : 
; 49   : 	return i;

  00046	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]

; 50   : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_CrtpPrintfFmt ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _CrtPrintTextXYWithAttr
_TEXT	SEGMENT
_pVideoBuf$ = -8					; size = 4
_i$ = -4						; size = 4
_pText$ = 8						; size = 4
_x$ = 12						; size = 2
_y$ = 16						; size = 2
_Attr$ = 20						; size = 1
_CrtPrintTextXYWithAttr PROC				; COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 54   : 	int i;
; 55   : 	UCHAR *pVideoBuf;
; 56   : 
; 57   : 	if(pText == NULL) return FALSE;

  00009	83 7d 08 00	 cmp	 DWORD PTR _pText$[ebp], 0
  0000d	75 07		 jne	 SHORT $LN17@CrtPrintTe
  0000f	33 c0		 xor	 eax, eax
  00011	e9 37 01 00 00	 jmp	 $LN18@CrtPrintTe
$LN17@CrtPrintTe:

; 58   : 
; 59   : 	if(x==0xffff && y==0xffff) {

  00016	0f b7 45 0c	 movzx	 eax, WORD PTR _x$[ebp]
  0001a	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0001f	75 15		 jne	 SHORT $LN16@CrtPrintTe
  00021	0f b7 45 10	 movzx	 eax, WORD PTR _y$[ebp]
  00025	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0002a	75 0a		 jne	 SHORT $LN16@CrtPrintTe

; 60   : 		pVideoBuf=CrtpGetNextVideoPtr();

  0002c	e8 00 00 00 00	 call	 _CrtpGetNextVideoPtr
  00031	89 45 f8	 mov	 DWORD PTR _pVideoBuf$[ebp], eax

; 61   : 	} else {

  00034	eb 15		 jmp	 SHORT $LN14@CrtPrintTe
$LN16@CrtPrintTe:

; 62   : 		pVideoBuf=CrtpGetNextVideoPtrWithPos(x, y);

  00036	66 8b 45 10	 mov	 ax, WORD PTR _y$[ebp]
  0003a	50		 push	 eax
  0003b	66 8b 4d 0c	 mov	 cx, WORD PTR _x$[ebp]
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 _CrtpGetNextVideoPtrWithPos
  00045	83 c4 08	 add	 esp, 8
  00048	89 45 f8	 mov	 DWORD PTR _pVideoBuf$[ebp], eax
$LN14@CrtPrintTe:

; 63   : 	}
; 64   : 
; 65   : 	while( *pText != NULL ) {

  0004b	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  0004e	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00051	85 c9		 test	 ecx, ecx
  00053	0f 84 e3 00 00
	00		 je	 $LN13@CrtPrintTe

; 66   : 		if(pVideoBuf >= (UCHAR *)(VIDEO_BUFFER_ADDRESS+VIDEO_BUFFER_SIZE)) {

  00059	81 7d f8 a0 8f
	0b 00		 cmp	 DWORD PTR _pVideoBuf$[ebp], 757664 ; 000b8fa0H
  00060	72 10		 jb	 SHORT $LN12@CrtPrintTe

; 67   : 			CrtpScrollOneLine();

  00062	e8 00 00 00 00	 call	 _CrtpScrollOneLine

; 68   : 			pVideoBuf -= (SCREEN_CX*2);

  00067	8b 45 f8	 mov	 eax, DWORD PTR _pVideoBuf$[ebp]
  0006a	2d a0 00 00 00	 sub	 eax, 160		; 000000a0H
  0006f	89 45 f8	 mov	 DWORD PTR _pVideoBuf$[ebp], eax
$LN12@CrtPrintTe:

; 69   : 		}
; 70   : 
; 71   : 		if(*pText==KEY_LF) {

  00072	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  00075	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00078	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0007b	75 05		 jne	 SHORT $LN11@CrtPrintTe
  0007d	e9 ac 00 00 00	 jmp	 $LN10@CrtPrintTe
$LN11@CrtPrintTe:

; 72   : 			;
; 73   : 		} else if(*pText==KEY_CR) {

  00082	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  00085	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00088	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  0008b	75 1d		 jne	 SHORT $LN9@CrtPrintTe

; 74   : 			CrtpKeyCR(&pVideoBuf);

  0008d	8d 45 f8	 lea	 eax, DWORD PTR _pVideoBuf$[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _CrtpKeyCR
  00096	83 c4 04	 add	 esp, 4

; 75   : 			CrtpKeyLF(&pVideoBuf);

  00099	8d 45 f8	 lea	 eax, DWORD PTR _pVideoBuf$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _CrtpKeyLF
  000a2	83 c4 04	 add	 esp, 4
  000a5	e9 84 00 00 00	 jmp	 $LN10@CrtPrintTe
$LN9@CrtPrintTe:

; 76   : 		} else if(*pText=='\b') {

  000aa	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  000ad	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000b0	83 f9 08	 cmp	 ecx, 8
  000b3	75 0e		 jne	 SHORT $LN7@CrtPrintTe

; 77   : 			CrtpKeyBackspace(&pVideoBuf);

  000b5	8d 45 f8	 lea	 eax, DWORD PTR _pVideoBuf$[ebp]
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _CrtpKeyBackspace
  000be	83 c4 04	 add	 esp, 4
  000c1	eb 6b		 jmp	 SHORT $LN10@CrtPrintTe
$LN7@CrtPrintTe:

; 78   : 		} else if(*pText==KEY_TAB) {

  000c3	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  000c6	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000c9	83 f9 09	 cmp	 ecx, 9
  000cc	75 3c		 jne	 SHORT $LN5@CrtPrintTe

; 79   : 			for(i=0; i<DEFAULT_TAB_SIZE; i++) {

  000ce	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d5	eb 09		 jmp	 SHORT $LN4@CrtPrintTe
$LN3@CrtPrintTe:
  000d7	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000da	83 c0 01	 add	 eax, 1
  000dd	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@CrtPrintTe:
  000e0	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  000e4	7d 22		 jge	 SHORT $LN2@CrtPrintTe

; 80   : 				*pVideoBuf++ = ' ';

  000e6	8b 45 f8	 mov	 eax, DWORD PTR _pVideoBuf$[ebp]
  000e9	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
  000ec	8b 4d f8	 mov	 ecx, DWORD PTR _pVideoBuf$[ebp]
  000ef	83 c1 01	 add	 ecx, 1
  000f2	89 4d f8	 mov	 DWORD PTR _pVideoBuf$[ebp], ecx

; 81   : 				*pVideoBuf++ = Attr;

  000f5	8b 45 f8	 mov	 eax, DWORD PTR _pVideoBuf$[ebp]
  000f8	8a 4d 14	 mov	 cl, BYTE PTR _Attr$[ebp]
  000fb	88 08		 mov	 BYTE PTR [eax], cl
  000fd	8b 55 f8	 mov	 edx, DWORD PTR _pVideoBuf$[ebp]
  00100	83 c2 01	 add	 edx, 1
  00103	89 55 f8	 mov	 DWORD PTR _pVideoBuf$[ebp], edx

; 82   : 			}

  00106	eb cf		 jmp	 SHORT $LN3@CrtPrintTe
$LN2@CrtPrintTe:

; 83   : 		} else {

  00108	eb 24		 jmp	 SHORT $LN10@CrtPrintTe
$LN5@CrtPrintTe:

; 84   : 			*pVideoBuf++=(*pText);

  0010a	8b 45 f8	 mov	 eax, DWORD PTR _pVideoBuf$[ebp]
  0010d	8b 4d 08	 mov	 ecx, DWORD PTR _pText$[ebp]
  00110	8a 11		 mov	 dl, BYTE PTR [ecx]
  00112	88 10		 mov	 BYTE PTR [eax], dl
  00114	8b 45 f8	 mov	 eax, DWORD PTR _pVideoBuf$[ebp]
  00117	83 c0 01	 add	 eax, 1
  0011a	89 45 f8	 mov	 DWORD PTR _pVideoBuf$[ebp], eax

; 85   : 			*pVideoBuf++=Attr;

  0011d	8b 45 f8	 mov	 eax, DWORD PTR _pVideoBuf$[ebp]
  00120	8a 4d 14	 mov	 cl, BYTE PTR _Attr$[ebp]
  00123	88 08		 mov	 BYTE PTR [eax], cl
  00125	8b 55 f8	 mov	 edx, DWORD PTR _pVideoBuf$[ebp]
  00128	83 c2 01	 add	 edx, 1
  0012b	89 55 f8	 mov	 DWORD PTR _pVideoBuf$[ebp], edx
$LN10@CrtPrintTe:

; 86   : 		}
; 87   : 
; 88   : 		pText++;

  0012e	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  00131	83 c0 01	 add	 eax, 1
  00134	89 45 08	 mov	 DWORD PTR _pText$[ebp], eax

; 89   : 	}

  00137	e9 0f ff ff ff	 jmp	 $LN14@CrtPrintTe
$LN13@CrtPrintTe:

; 90   : 
; 91   : 	CrtpUpdateCursorPosByPtr(pVideoBuf);

  0013c	8b 45 f8	 mov	 eax, DWORD PTR _pVideoBuf$[ebp]
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 _CrtpUpdateCursorPosByPtr
  00145	83 c4 04	 add	 esp, 4

; 92   : 
; 93   : 	return TRUE;

  00148	b8 01 00 00 00	 mov	 eax, 1
$LN18@CrtPrintTe:

; 94   : }

  0014d	5f		 pop	 edi
  0014e	5e		 pop	 esi
  0014f	5b		 pop	 ebx
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c3		 ret	 0
_CrtPrintTextXYWithAttr ENDP
_TEXT	ENDS
_BSS	SEGMENT
_m_CursorYPos DW 01H DUP (?)
	ALIGN	4

_m_CursorXPos DW 01H DUP (?)
; Function compile flags: /Odtp /ZI
_BSS	ENDS
;	COMDAT _CrtpGetNextVideoPtr
_TEXT	SEGMENT
_CrtpGetNextVideoPtr PROC				; COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 98   : 	return (UCHAR *)(VIDEO_BUFFER_ADDRESS+(m_CursorXPos+m_CursorYPos*SCREEN_CX)*2);

  00009	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _m_CursorXPos
  00010	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR _m_CursorYPos
  00017	6b c9 50	 imul	 ecx, 80			; 00000050H
  0001a	03 c1		 add	 eax, ecx
  0001c	8d 84 00 00 80
	0b 00		 lea	 eax, DWORD PTR [eax+eax+753664]

; 99   : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_CrtpGetNextVideoPtr ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _CrtpGetNextVideoPtrWithPos
_TEXT	SEGMENT
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_CrtpGetNextVideoPtrWithPos PROC			; COMDAT

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 103  : 	return (UCHAR *)(VIDEO_BUFFER_ADDRESS+(x+y*SCREEN_CX)*2);

  00009	0f b7 45 08	 movzx	 eax, WORD PTR _x$[ebp]
  0000d	0f b7 4d 0c	 movzx	 ecx, WORD PTR _y$[ebp]
  00011	6b c9 50	 imul	 ecx, 80			; 00000050H
  00014	03 c1		 add	 eax, ecx
  00016	8d 84 00 00 80
	0b 00		 lea	 eax, DWORD PTR [eax+eax+753664]

; 104  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_CrtpGetNextVideoPtrWithPos ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _CrtpScrollOneLine
_TEXT	SEGMENT
_pSecondLine$ = -8					; size = 4
_pVideoBase$ = -4					; size = 4
_CrtpScrollOneLine PROC					; COMDAT

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 108  : 	UCHAR *pVideoBase = (UCHAR *)VIDEO_BUFFER_ADDRESS;

  00009	c7 45 fc 00 80
	0b 00		 mov	 DWORD PTR _pVideoBase$[ebp], 753664 ; 000b8000H

; 109  : 	UCHAR *pSecondLine = (UCHAR *)(VIDEO_BUFFER_ADDRESS+SCREEN_CX*2);

  00010	c7 45 f8 a0 80
	0b 00		 mov	 DWORD PTR _pSecondLine$[ebp], 753824 ; 000b80a0H
$LN4@CrtpScroll:

; 110  : 
; 111  : 	while(pSecondLine < (UCHAR *)(VIDEO_BUFFER_ADDRESS+VIDEO_BUFFER_SIZE)) {

  00017	81 7d f8 a0 8f
	0b 00		 cmp	 DWORD PTR _pSecondLine$[ebp], 757664 ; 000b8fa0H
  0001e	73 1e		 jae	 SHORT $LN2@CrtpScroll

; 112  : 		*pVideoBase++ = (*pSecondLine++);

  00020	8b 45 fc	 mov	 eax, DWORD PTR _pVideoBase$[ebp]
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _pSecondLine$[ebp]
  00026	8a 11		 mov	 dl, BYTE PTR [ecx]
  00028	88 10		 mov	 BYTE PTR [eax], dl
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _pVideoBase$[ebp]
  0002d	83 c0 01	 add	 eax, 1
  00030	89 45 fc	 mov	 DWORD PTR _pVideoBase$[ebp], eax
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _pSecondLine$[ebp]
  00036	83 c1 01	 add	 ecx, 1
  00039	89 4d f8	 mov	 DWORD PTR _pSecondLine$[ebp], ecx

; 113  : 	}

  0003c	eb d9		 jmp	 SHORT $LN4@CrtpScroll
$LN2@CrtpScroll:

; 114  : 	while(pVideoBase < (UCHAR *)(VIDEO_BUFFER_ADDRESS+VIDEO_BUFFER_SIZE)) {

  0003e	81 7d fc a0 8f
	0b 00		 cmp	 DWORD PTR _pVideoBase$[ebp], 757664 ; 000b8fa0H
  00045	73 20		 jae	 SHORT $LN5@CrtpScroll

; 115  : 		*pVideoBase++ = ' ';

  00047	8b 45 fc	 mov	 eax, DWORD PTR _pVideoBase$[ebp]
  0004a	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _pVideoBase$[ebp]
  00050	83 c1 01	 add	 ecx, 1
  00053	89 4d fc	 mov	 DWORD PTR _pVideoBase$[ebp], ecx

; 116  : 		*pVideoBase++ = DEFAULT_ATTRIBUTE;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _pVideoBase$[ebp]
  00059	c6 00 07	 mov	 BYTE PTR [eax], 7
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _pVideoBase$[ebp]
  0005f	83 c1 01	 add	 ecx, 1
  00062	89 4d fc	 mov	 DWORD PTR _pVideoBase$[ebp], ecx

; 117  : 	}

  00065	eb d7		 jmp	 SHORT $LN2@CrtpScroll
$LN5@CrtpScroll:

; 118  : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_CrtpScrollOneLine ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _CrtpKeyLF
_TEXT	SEGMENT
_videoPos$ = -16					; size = 4
_pVideoBase$ = -12					; size = 4
_y$ = -8						; size = 2
_x$ = -4						; size = 2
_pVideoPtr$ = 8						; size = 4
_CrtpKeyLF PROC						; COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 122  : 	WORD x, y;
; 123  : 	UCHAR *pVideoBase = (UCHAR *)VIDEO_BUFFER_ADDRESS;

  00009	c7 45 f4 00 80
	0b 00		 mov	 DWORD PTR _pVideoBase$[ebp], 753664 ; 000b8000H

; 124  : 	int videoPos = ((int)*pVideoPtr-VIDEO_BUFFER_ADDRESS)/2;

  00010	8b 45 08	 mov	 eax, DWORD PTR _pVideoPtr$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	2d 00 80 0b 00	 sub	 eax, 753664		; 000b8000H
  0001a	99		 cdq
  0001b	2b c2		 sub	 eax, edx
  0001d	d1 f8		 sar	 eax, 1
  0001f	89 45 f0	 mov	 DWORD PTR _videoPos$[ebp], eax

; 125  : 
; 126  : 	y = (WORD)(videoPos / SCREEN_CX);

  00022	8b 45 f0	 mov	 eax, DWORD PTR _videoPos$[ebp]
  00025	99		 cdq
  00026	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  0002b	f7 f9		 idiv	 ecx
  0002d	66 89 45 f8	 mov	 WORD PTR _y$[ebp], ax

; 127  : 	x = (WORD)(videoPos % SCREEN_CX);

  00031	8b 45 f0	 mov	 eax, DWORD PTR _videoPos$[ebp]
  00034	99		 cdq
  00035	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  0003a	f7 f9		 idiv	 ecx
  0003c	66 89 55 fc	 mov	 WORD PTR _x$[ebp], dx

; 128  : 
; 129  : 	if(y == (SCREEN_CY-1)) {

  00040	0f b7 45 f8	 movzx	 eax, WORD PTR _y$[ebp]
  00044	83 f8 18	 cmp	 eax, 24			; 00000018H
  00047	75 21		 jne	 SHORT $LN2@CrtpKeyLF

; 130  : 		CrtpScrollOneLine();

  00049	e8 00 00 00 00	 call	 _CrtpScrollOneLine

; 131  : 		*pVideoPtr = (UCHAR *)(VIDEO_BUFFER_ADDRESS+VIDEO_BUFFER_SIZE-(SCREEN_CX-x)*20);

  0004e	0f b7 45 fc	 movzx	 eax, WORD PTR _x$[ebp]
  00052	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00057	2b c8		 sub	 ecx, eax
  00059	6b c9 14	 imul	 ecx, 20			; 00000014H
  0005c	ba a0 8f 0b 00	 mov	 edx, 757664		; 000b8fa0H
  00061	2b d1		 sub	 edx, ecx
  00063	8b 45 08	 mov	 eax, DWORD PTR _pVideoPtr$[ebp]
  00066	89 10		 mov	 DWORD PTR [eax], edx

; 132  : 	} else{

  00068	eb 10		 jmp	 SHORT $LN3@CrtpKeyLF
$LN2@CrtpKeyLF:

; 133  : 		*pVideoPtr += (SCREEN_CX*2);

  0006a	8b 45 08	 mov	 eax, DWORD PTR _pVideoPtr$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00075	8b 55 08	 mov	 edx, DWORD PTR _pVideoPtr$[ebp]
  00078	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@CrtpKeyLF:

; 134  : 	}
; 135  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
_CrtpKeyLF ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _CrtpKeyCR
_TEXT	SEGMENT
_videoPos$ = -8						; size = 4
_x$ = -4						; size = 2
_pVideoPtr$ = 8						; size = 4
_CrtpKeyCR PROC						; COMDAT

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 139  : 	WORD x;
; 140  : 	int videoPos = ((int)*pVideoPtr-VIDEO_BUFFER_ADDRESS)/2;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pVideoPtr$[ebp]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
  0000e	2d 00 80 0b 00	 sub	 eax, 753664		; 000b8000H
  00013	99		 cdq
  00014	2b c2		 sub	 eax, edx
  00016	d1 f8		 sar	 eax, 1
  00018	89 45 f8	 mov	 DWORD PTR _videoPos$[ebp], eax

; 141  : 
; 142  : 	x = (WORD)(videoPos % SCREEN_CX);

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _videoPos$[ebp]
  0001e	99		 cdq
  0001f	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00024	f7 f9		 idiv	 ecx
  00026	66 89 55 fc	 mov	 WORD PTR _x$[ebp], dx

; 143  : 	*pVideoPtr-=(x*2);

  0002a	0f b7 45 fc	 movzx	 eax, WORD PTR _x$[ebp]
  0002e	d1 e0		 shl	 eax, 1
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _pVideoPtr$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	2b d0		 sub	 edx, eax
  00037	8b 45 08	 mov	 eax, DWORD PTR _pVideoPtr$[ebp]
  0003a	89 10		 mov	 DWORD PTR [eax], edx

; 144  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_CrtpKeyCR ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _CrtpKeyBackspace
_TEXT	SEGMENT
_pVideoPtr$ = 8						; size = 4
_CrtpKeyBackspace PROC					; COMDAT

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 148  : 	if(*pVideoPtr < (UCHAR *)(VIDEO_BUFFER_ADDRESS+2))

  00009	8b 45 08	 mov	 eax, DWORD PTR _pVideoPtr$[ebp]
  0000c	81 38 02 80 0b
	00		 cmp	 DWORD PTR [eax], 753666	; 000b8002H
  00012	73 02		 jae	 SHORT $LN1@CrtpKeyBac

; 149  : 		return;

  00014	eb 15		 jmp	 SHORT $LN2@CrtpKeyBac
$LN1@CrtpKeyBac:

; 150  : 
; 151  : 	*pVideoPtr-=2;

  00016	8b 45 08	 mov	 eax, DWORD PTR _pVideoPtr$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	83 e9 02	 sub	 ecx, 2
  0001e	8b 55 08	 mov	 edx, DWORD PTR _pVideoPtr$[ebp]
  00021	89 0a		 mov	 DWORD PTR [edx], ecx

; 152  : 	**pVideoPtr = ' ';

  00023	8b 45 08	 mov	 eax, DWORD PTR _pVideoPtr$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	c6 01 20	 mov	 BYTE PTR [ecx], 32	; 00000020H
$LN2@CrtpKeyBac:

; 153  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_CrtpKeyBackspace ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _CrtpUpdateCursorPosByPtr
_TEXT	SEGMENT
_bufPos$ = -12						; size = 4
_y$ = -8						; size = 2
_x$ = -4						; size = 2
_pPtr$ = 8						; size = 4
_CrtpUpdateCursorPosByPtr PROC				; COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 157  : 	WORD x, y;
; 158  : 	int bufPos = ((int)pPtr-VIDEO_BUFFER_ADDRESS)/2;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pPtr$[ebp]
  0000c	2d 00 80 0b 00	 sub	 eax, 753664		; 000b8000H
  00011	99		 cdq
  00012	2b c2		 sub	 eax, edx
  00014	d1 f8		 sar	 eax, 1
  00016	89 45 f4	 mov	 DWORD PTR _bufPos$[ebp], eax

; 159  : 
; 160  : 	y = (WORD)(bufPos / SCREEN_CX);

  00019	8b 45 f4	 mov	 eax, DWORD PTR _bufPos$[ebp]
  0001c	99		 cdq
  0001d	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00022	f7 f9		 idiv	 ecx
  00024	66 89 45 f8	 mov	 WORD PTR _y$[ebp], ax

; 161  : 	x = (WORD)(bufPos % SCREEN_CX);

  00028	8b 45 f4	 mov	 eax, DWORD PTR _bufPos$[ebp]
  0002b	99		 cdq
  0002c	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00031	f7 f9		 idiv	 ecx
  00033	66 89 55 fc	 mov	 WORD PTR _x$[ebp], dx

; 162  : 
; 163  : 	CrtpSetCursorPos(x, y);

  00037	66 8b 45 f8	 mov	 ax, WORD PTR _y$[ebp]
  0003b	50		 push	 eax
  0003c	66 8b 4d fc	 mov	 cx, WORD PTR _x$[ebp]
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _CrtpSetCursorPos
  00046	83 c4 08	 add	 esp, 8

; 164  : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_CrtpUpdateCursorPosByPtr ENDP
_TEXT	ENDS
EXTRN	_WRITE_PORT_UCHAR:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _CrtpSetCursorPos
_TEXT	SEGMENT
_data$ = -1						; size = 1
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_CrtpSetCursorPos PROC					; COMDAT

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 168  : 	UCHAR data;
; 169  : 
; 170  : 
; 171  : 	ENTER_CRITICAL_SECTION();

  00009	9c		 pushfd
  0000a	fa		 cli

; 172  : 	m_CursorXPos=x; m_CursorYPos=y;

  0000b	66 8b 45 08	 mov	 ax, WORD PTR _x$[ebp]
  0000f	66 a3 00 00 00
	00		 mov	 WORD PTR _m_CursorXPos, ax
  00015	66 8b 45 0c	 mov	 ax, WORD PTR _y$[ebp]
  00019	66 a3 00 00 00
	00		 mov	 WORD PTR _m_CursorYPos, ax

; 173  : 	EXIT_CRITICAL_SECTION();

  0001f	9d		 popfd

; 174  : 
; 175  : 	data=(UCHAR)((x+y*SCREEN_CX)>>8);

  00020	0f b7 45 08	 movzx	 eax, WORD PTR _x$[ebp]
  00024	0f b7 4d 0c	 movzx	 ecx, WORD PTR _y$[ebp]
  00028	6b c9 50	 imul	 ecx, 80			; 00000050H
  0002b	03 c1		 add	 eax, ecx
  0002d	c1 f8 08	 sar	 eax, 8
  00030	88 45 ff	 mov	 BYTE PTR _data$[ebp], al

; 176  : 	WRITE_PORT_UCHAR((PUCHAR)0x3d4, 0x0e);

  00033	6a 0e		 push	 14			; 0000000eH
  00035	68 d4 03 00 00	 push	 980			; 000003d4H
  0003a	e8 00 00 00 00	 call	 _WRITE_PORT_UCHAR
  0003f	83 c4 08	 add	 esp, 8

; 177  : 	WRITE_PORT_UCHAR((PUCHAR)0x3d5, data);

  00042	8a 45 ff	 mov	 al, BYTE PTR _data$[ebp]
  00045	50		 push	 eax
  00046	68 d5 03 00 00	 push	 981			; 000003d5H
  0004b	e8 00 00 00 00	 call	 _WRITE_PORT_UCHAR
  00050	83 c4 08	 add	 esp, 8

; 178  : 	data=(UCHAR)((x+y*SCREEN_CX)&0xff);

  00053	0f b7 45 08	 movzx	 eax, WORD PTR _x$[ebp]
  00057	0f b7 4d 0c	 movzx	 ecx, WORD PTR _y$[ebp]
  0005b	6b c9 50	 imul	 ecx, 80			; 00000050H
  0005e	03 c1		 add	 eax, ecx
  00060	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00065	88 45 ff	 mov	 BYTE PTR _data$[ebp], al

; 179  : 	WRITE_PORT_UCHAR((PUCHAR)0x3d4, 0x0f);

  00068	6a 0f		 push	 15			; 0000000fH
  0006a	68 d4 03 00 00	 push	 980			; 000003d4H
  0006f	e8 00 00 00 00	 call	 _WRITE_PORT_UCHAR
  00074	83 c4 08	 add	 esp, 8

; 180  : 	WRITE_PORT_UCHAR((PUCHAR)0x3d5, data);

  00077	8a 45 ff	 mov	 al, BYTE PTR _data$[ebp]
  0007a	50		 push	 eax
  0007b	68 d5 03 00 00	 push	 981			; 000003d5H
  00080	e8 00 00 00 00	 call	 _WRITE_PORT_UCHAR
  00085	83 c4 08	 add	 esp, 8

; 181  : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_CrtpSetCursorPos ENDP
_TEXT	ENDS
PUBLIC	_CrtClearScreen
PUBLIC	_CrtInitializeDriver
; Function compile flags: /Odtp /ZI
;	COMDAT _CrtInitializeDriver
_TEXT	SEGMENT
_CrtInitializeDriver PROC				; COMDAT

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 185  : 	CrtClearScreen();

  00009	e8 00 00 00 00	 call	 _CrtClearScreen

; 186  : 
; 187  : 	return TRUE;

  0000e	b8 01 00 00 00	 mov	 eax, 1

; 188  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_CrtInitializeDriver ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _CrtClearScreen
_TEXT	SEGMENT
_pVideoBuf$ = -4					; size = 4
_CrtClearScreen PROC					; COMDAT

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 192  : 	UCHAR* pVideoBuf;
; 193  : 
; 194  : 	pVideoBuf=(UCHAR *)VIDEO_BUFFER_ADDRESS;

  00009	c7 45 fc 00 80
	0b 00		 mov	 DWORD PTR _pVideoBuf$[ebp], 753664 ; 000b8000H
$LN2@CrtClearSc:

; 195  : 	while(pVideoBuf < (UCHAR *)(VIDEO_BUFFER_ADDRESS+VIDEO_BUFFER_SIZE)) {

  00010	81 7d fc a0 8f
	0b 00		 cmp	 DWORD PTR _pVideoBuf$[ebp], 757664 ; 000b8fa0H
  00017	73 20		 jae	 SHORT $LN1@CrtClearSc

; 196  : 		*pVideoBuf++=' ';

  00019	8b 45 fc	 mov	 eax, DWORD PTR _pVideoBuf$[ebp]
  0001c	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _pVideoBuf$[ebp]
  00022	83 c1 01	 add	 ecx, 1
  00025	89 4d fc	 mov	 DWORD PTR _pVideoBuf$[ebp], ecx

; 197  : 		*pVideoBuf++=DEFAULT_ATTRIBUTE;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _pVideoBuf$[ebp]
  0002b	c6 00 07	 mov	 BYTE PTR [eax], 7
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _pVideoBuf$[ebp]
  00031	83 c1 01	 add	 ecx, 1
  00034	89 4d fc	 mov	 DWORD PTR _pVideoBuf$[ebp], ecx

; 198  : 	}

  00037	eb d7		 jmp	 SHORT $LN2@CrtClearSc
$LN1@CrtClearSc:

; 199  : 
; 200  : 	CrtpSetCursorPos(0, 0);

  00039	6a 00		 push	 0
  0003b	6a 00		 push	 0
  0003d	e8 00 00 00 00	 call	 _CrtpSetCursorPos
  00042	83 c4 08	 add	 esp, 8

; 201  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_CrtClearScreen ENDP
_TEXT	ENDS
END
