; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\develop\MyoskOS\myoksos.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@CINOICC@Booting?5Error?$CB?$AN?6?$AA@	; `string'
PUBLIC	??_C@_0CL@EKIIKDMP@KrnInitializeKernel?$CI?$CJ?5returned?5a@ ; `string'
PUBLIC	_myoksos_init
EXTRN	_KrnInitializeKernel:PROC
EXTRN	_CrtInitializeDriver:PROC
;	COMDAT ??_C@_0BB@CINOICC@Booting?5Error?$CB?$AN?6?$AA@
; File c:\develop\myoskos\myoksos.c
CONST	SEGMENT
??_C@_0BB@CINOICC@Booting?5Error?$CB?$AN?6?$AA@ DB 'Booting Error!', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EKIIKDMP@KrnInitializeKernel?$CI?$CJ?5returned?5a@
CONST	SEGMENT
??_C@_0CL@EKIIKDMP@KrnInitializeKernel?$CI?$CJ?5returned?5a@ DB 'KrnIniti'
	DB	'alizeKernel() returned an error.', 0dH, 0aH, 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _myoksos_init
_TEXT	SEGMENT
_myoksos_init PROC					; COMDAT

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10   : 	  //콘솔 시스템 초기화 함수 호출
; 11   :    if(!CrtInitializeDriver())

  00009	e8 00 00 00 00	 call	 _CrtInitializeDriver
  0000e	85 c0		 test	 eax, eax
  00010	75 0a		 jne	 SHORT $LN2@myoksos_in

; 12   :    {
; 13   :       halt(NULL);

  00012	6a 00		 push	 0
  00014	e8 00 00 00 00	 call	 _halt
  00019	83 c4 04	 add	 esp, 4
$LN2@myoksos_in:

; 14   :    }
; 15   : 
; 16   :    //커널 초기화 루틴의 호출
; 17   :    if(!KrnInitializeKernel())

  0001c	e8 00 00 00 00	 call	 _KrnInitializeKernel
  00021	85 c0		 test	 eax, eax
  00023	75 0d		 jne	 SHORT $LN1@myoksos_in

; 18   :    {
; 19   : 	   halt("KrnInitializeKernel() returned an error.\r\n");

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@EKIIKDMP@KrnInitializeKernel?$CI?$CJ?5returned?5a@
  0002a	e8 00 00 00 00	 call	 _halt
  0002f	83 c4 04	 add	 esp, 4
$LN1@myoksos_in:

; 20   :    }
; 21   : 
; 22   :    //만약 초기화 실패시, 이 부분 실행 (전체 시스템 정지)
; 23   :    halt("Booting Error!\r\n");

  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CINOICC@Booting?5Error?$CB?$AN?6?$AA@
  00037	e8 00 00 00 00	 call	 _halt
  0003c	83 c4 04	 add	 esp, 4

; 24   :    return 0;

  0003f	33 c0		 xor	 eax, eax

; 25   : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_myoksos_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@CPDHJIFL@Halting?5system?4?$AN?6?$AA@	; `string'
EXTRN	_CrtPrintf:PROC
;	COMDAT ??_C@_0BC@CPDHJIFL@Halting?5system?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BC@CPDHJIFL@Halting?5system?4?$AN?6?$AA@ DB 'Halting system.', 0dH
	DB	0aH, 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _halt
_TEXT	SEGMENT
_pMsg$ = 8						; size = 4
_halt	PROC						; COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 30   :    if(pMsg !=NULL){

  00009	83 7d 08 00	 cmp	 DWORD PTR _pMsg$[ebp], 0
  0000d	74 19		 je	 SHORT $LN2@halt

; 31   :       DbgPrint(pMsg);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _CrtPrintf
  00018	83 c4 04	 add	 esp, 4

; 32   :       DbgPrint("Halting system.\r\n");

  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CPDHJIFL@Halting?5system?4?$AN?6?$AA@
  00020	e8 00 00 00 00	 call	 _CrtPrintf
  00025	83 c4 04	 add	 esp, 4
$LN2@halt:

; 33   :    }
; 34   :    while(1);

  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	74 02		 je	 SHORT $LN4@halt
  00031	eb f5		 jmp	 SHORT $LN2@halt
$LN4@halt:

; 35   : 
; 36   : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_halt	ENDP
_TEXT	ENDS
END
